import { Component, OnInit } from '@angular/core';
import { AvatarService } from 'src/app/services/avatar.service';
import { Camera, CameraResultType, CameraSource } from '@capacitor/camera';
import { AlertController, LoadingController, ModalController } from '@ionic/angular';
import { ColectionService } from 'src/app/services/colection.service';
import { ModalPage } from '../modal/modal.page';

@Component({
  selector: 'app-malware',
  templateUrl: './malware.page.html',
  styleUrls: ['./malware.page.scss'],
})

export class MalwarePage {
  profile = null;
  notes = [];

  constructor(
    private avatarService: AvatarService,
    private loadingController: LoadingController,
		private alertController: AlertController,
    private colectionservice: ColectionService,
    private modalCtrl: ModalController,
    
  ) 
    
  { 
    this.avatarService.getUserProfile().subscribe((data) => {
			this.profile = data;
		});

    this.colectionservice.getNotes().subscribe(res => {
      console.log(res);
      this.notes = res;
  });

  }

  async openNote(note) {
    const modal = await this.modalCtrl.create({
      component: ModalPage,
      componentProps: { id: note.id },
      breakpoints: [0, 0.5, 0.8],
      initialBreakpoint: 0.8
    });
    modal.present();
  }

  async addNote() {
    const alert = await this.alertController.create({
      header: 'Exploit',
      inputs: [
        {
          name: 'CVE',
          placeholder: 'codigo del CVE',
          type: 'text',
        },
        {
          name: 'vulnerabilidad',
          placeholder: ' vulerabilidad',
          type: 'text',
        },
        {
          name: 'plataforma',
          placeholder: ' plataforma afectada',
          type: 'text',
        },
        {
          name: 'tipo',
          placeholder: ' tipo',
          type: 'text',
        },
        {
          name: 'descripcion',
          placeholder: 'breve descripcion',
          type: 'text',
        }
      ],
      buttons: [
        {
          text: 'Cancel',
          role: 'cancel',
        },
        {
          text: 'Add',
          handler: (res) => {  
            this.colectionservice.addNote (
              {
                CVE: res.CVE,
                descripcion: res.descripcion,
                plataforma: res.plataforma,
                tipo: res.tipo,
                vulnerabilidad: res.vulnerabilidad,
            });
          }
        }
      ]

    });
    await alert.present();
  }

  async changeImage() {
		const image = await Camera.getPhoto({
			quality: 90,
			allowEditing: false,
			resultType: CameraResultType.Base64,
			source: CameraSource.Photos // Camera, Photos or Prompt!
		});
  
      if (image) {
          const loading = await this.loadingController.create();
          await loading.present();

          const result = await this.avatarService.uploadImage(image);
          loading.dismiss();

      if (!result) {
        const alert = await this.alertController.create({
          header: 'Upload failed',
          message: 'There was a problem uploading your avatar.',
          buttons: ['OK']
          });
        await alert.present();
        }
      }
  }

}
